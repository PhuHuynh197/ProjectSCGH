/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Tuan4;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author THIS PC
 */
public class frmECC extends javax.swing.JFrame {

    /**
     * Creates new form frmECC
     */
    private ECCCipher ecc;
    private PublicKey publicKey;
    private PrivateKey privateKey;
    
    public frmECC() {
        initComponents();
        ecc = new ECCCipher();
        Security.addProvider(new BouncyCastleProvider());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPlaintext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCiphertext = new javax.swing.JTextArea();
        btnEnCrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnGenerateKeys = new javax.swing.JButton();
        btnLoadKeys = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPublickey = new javax.swing.JTextField();
        txtPrivatekey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel3.setText("Cipher Text");

        txtPlaintext.setColumns(20);
        txtPlaintext.setRows(5);
        jScrollPane1.setViewportView(txtPlaintext);

        txtCiphertext.setColumns(20);
        txtCiphertext.setRows(5);
        jScrollPane2.setViewportView(txtCiphertext);

        btnEnCrypt.setText("Encrypt");
        btnEnCrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnCryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel1.setText("Plain Text");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Elliptic Curve Cryptography");

        btnGenerateKeys.setText("GenerateKeys");
        btnGenerateKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateKeysActionPerformed(evt);
            }
        });

        btnLoadKeys.setText("Load Keys");
        btnLoadKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadKeysActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setText("Public Key");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel5.setText("Private Key");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel5))
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)
                                .addComponent(txtPublickey)
                                .addComponent(txtPrivatekey)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(btnGenerateKeys)
                            .addGap(18, 18, 18)
                            .addComponent(btnLoadKeys)
                            .addGap(18, 18, 18)
                            .addComponent(btnEnCrypt)
                            .addGap(18, 18, 18)
                            .addComponent(btnDecrypt)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel4)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel1)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPublickey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPrivatekey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(54, 54, 54)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDecrypt)
                    .addComponent(btnEnCrypt)
                    .addComponent(btnLoadKeys)
                    .addComponent(btnGenerateKeys))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnCryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnCryptActionPerformed
        try {
            String plaintext = txtPlaintext.getText();
            byte[] ciphertext = ecc.encrypt(plaintext, publicKey);
            txtCiphertext.setText(Base64.getEncoder().encodeToString(ciphertext));
        } catch (Exception ex) {
            Logger.getLogger(frmECC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error encrypting: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEnCryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        try {
            byte[] ciphertext = Base64.getDecoder().decode(txtCiphertext.getText());
            String decryptedText = ecc.decrypt(ciphertext, privateKey);
            txtPlaintext.setText(decryptedText);
        } catch (Exception ex) {
            Logger.getLogger(frmECC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error decrypting: " + ex.getMessage(),
                                            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnGenerateKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateKeysActionPerformed
        try {
            KeyPair keyPair = ecc.generateKeyPair();
            publicKey = keyPair.getPublic();
            privateKey = keyPair.getPrivate();

            txtPublickey.setText(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
            txtPrivatekey.setText(Base64.getEncoder().encodeToString(privateKey.getEncoded()));

            // Save public key to file
            JFileChooser publicKeyChooser = new JFileChooser();
            publicKeyChooser.setDialogTitle("Save Public Key File");
            int publicKeyChooserResult = publicKeyChooser.showSaveDialog(this);

            if (publicKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File publicKeyFile = publicKeyChooser.getSelectedFile();
                try (FileWriter writer = new FileWriter(publicKeyFile.getAbsolutePath())) {
                    writer.write(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
                    JOptionPane.showMessageDialog(this,
                            "Public Key saved to file successfully.",
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error saving Public Key file: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            // Save private key to file
            JFileChooser privateKeyChooser = new JFileChooser();
            privateKeyChooser.setDialogTitle("Save Private Key File");
            int privateKeyChooserResult = privateKeyChooser.showSaveDialog(this);
            if (privateKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File privateKeyFile = privateKeyChooser.getSelectedFile();
                try (FileWriter writer = new FileWriter(privateKeyFile.getAbsolutePath())) {
                    writer.write(Base64.getEncoder().encodeToString(privateKey.getEncoded()));
                    JOptionPane.showMessageDialog(this,
                            "Private Key saved to file successfully.",
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Error saving Private Key file: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }catch (Exception ex) {
            Logger.getLogger(frmECC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                                            "Error generating ECC key pair: " + ex.getMessage(),
                                            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGenerateKeysActionPerformed

    private void btnLoadKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadKeysActionPerformed
        try {
            // Load public key from file
            JFileChooser publicKeyChooser = new JFileChooser();
            publicKeyChooser.setDialogTitle("Load Public Key File");
            int publicKeyChooserResult = publicKeyChooser.showOpenDialog(this);

            if (publicKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File publicKeyFile = publicKeyChooser.getSelectedFile();
                byte[] publicKeyBytes = Base64.getDecoder().decode(
                        new String(java.nio.file.Files.readAllBytes(publicKeyFile.toPath())));
                publicKey = ECCCipher.loadPublicKey(publicKeyBytes);
                txtPublickey.setText(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
            }

            // Load private key from file
            JFileChooser privateKeyChooser = new JFileChooser();
            privateKeyChooser.setDialogTitle("Load Private Key File");
            int privateKeyChooserResult = privateKeyChooser.showOpenDialog(this);

            if (privateKeyChooserResult == JFileChooser.APPROVE_OPTION) {
                File privateKeyFile = privateKeyChooser.getSelectedFile();
                byte[] privateKeyBytes = Base64.getDecoder().decode(
                        new String(java.nio.file.Files.readAllBytes(privateKeyFile.toPath())));
                privateKey = ECCCipher.loadPrivateKey(privateKeyBytes);
                txtPrivatekey.setText(Base64.getEncoder().encodeToString(privateKey.getEncoded()));
            }

        } catch (Exception ex) {
            Logger.getLogger(frmECC.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error loading keys: " + ex.getMessage(),
                                            "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadKeysActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmECC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmECC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEnCrypt;
    private javax.swing.JButton btnGenerateKeys;
    private javax.swing.JButton btnLoadKeys;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtCiphertext;
    private javax.swing.JTextArea txtPlaintext;
    private javax.swing.JTextField txtPrivatekey;
    private javax.swing.JTextField txtPublickey;
    // End of variables declaration//GEN-END:variables
}
