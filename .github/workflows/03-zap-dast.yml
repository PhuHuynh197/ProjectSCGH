name: Dynamic Application Security Testing - OWASP ZAP

on:
  workflow_dispatch:
  push:
    branches: [ "main", "**" ]
  pull_request:

env:
  TARGET_URL: http://localhost:8080
  ZAP_TIMEOUT_MINUTES: 20
  MEDIUM_THRESHOLD: 3    
  FAIL_ON_HIGH: "true"   
jobs:
  zap-dast-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Juice Shop (vulnerable app) in Docker
        run: |
          echo "Starting OWASP Juice Shop (for DAST target)..."
          docker run -d --name juice_shop_demo -p 8080:3000 bkimminich/juice-shop:latest
          echo "Waiting for Juice Shop to be ready (max 3 minutes)..."
          for i in {1..36}; do
            if curl -sSf ${TARGET_URL} >/dev/null 2>&1; then
              echo "Juice Shop is up!"
              break
            fi
            echo "Waiting... ($i/36)"
            sleep 5
          done
          # print a short check
          curl -I --max-time 5 ${TARGET_URL} || true

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: '${{ env.TARGET_URL }}'
          cmd_options: "-a -T ${{ env.ZAP_TIMEOUT_MINUTES }}"
          fail_action: false            
          allow_issue_writing: false

      - name: List generated files
        run: |
          echo "Workspace files:"
          ls -la
          echo "Report JSON exists?"; test -f report.json && echo "report.json exists" || echo "report.json missing"
          echo "Report HTML exists?"; test -f report.html && echo "report.html exists" || echo "report.html missing"
          # Some versions write different filenames; normalize copy if necessary
          if [ -f report.json ]; then cp report.json zap_report.json; fi
          if [ -f report.html ]; then cp report.html zap_report.html; fi
          # Some older action names: report_md.html / report.md => attempt safe copies
          test -f zap_report.json && echo "zap_report.json ready" || echo "zap_report.json missing"

      - name: Normalize ZAP output filenames
        if: always()
        run: |
          echo "== Normalize ZAP report filenames =="
          ls -la || true
          # Copy về tên chuẩn nếu tồn tại các biến thể
          if [ -f report_html.html ]; then cp -f report_html.html zap_report.html; fi
          if [ -f report_json.json ]; then cp -f report_json.json zap_report.json; fi
          if [ -f zap_scan_report.html ]; then cp -f zap_scan_report.html zap_report.html; fi
          if [ -f report.md ]; then cp -f report.md zap_report.html; fi
          # Một số bản viết ra thư mục con . (phòng xa)
          if [ ! -f zap_report.html ]; then
            HTML_CAND=$(find . -maxdepth 2 -type f \( -name "report_html.html" -o -name "zap_scan_report.html" -o -name "report.md" \) | head -n 1)
            if [ -n "$HTML_CAND" ]; then cp -f "$HTML_CAND" zap_report.html; fi
          fi
          if [ ! -f zap_report.json ]; then
            JSON_CAND=$(find . -maxdepth 2 -type f -name "report_json.json" | head -n 1)
            if [ -n "$JSON_CAND" ]; then cp -f "$JSON_CAND" zap_report.json; fi
          fi
          echo "== After normalize =="
          ls -la

      - name: Evaluate ZAP report (fail on thresholds)
        if: always()
        run: |
          set -euo pipefail
          if [ ! -f zap_report.json ]; then
            echo "No JSON report found; skipping threshold checks."
            exit 0
          fi
          HIGH=$(jq '[.site[]?.alerts[]? | select(.risk=="High")] | length' zap_report.json)
          MED=$(jq '[.site[]?.alerts[]? | select(.risk=="Medium")] | length' zap_report.json)
          LOW=$(jq '[.site[]?.alerts[]? | select(.risk=="Low")] | length' zap_report.json)
          echo "High: $HIGH | Medium: $MED | Low: $LOW"
          if [ "$HIGH" -gt 0 ]; then
            echo "::error::Found $HIGH HIGH alerts — failing."
            exit 3
          fi
          if [ "$MED" -ge 3 ]; then
            echo "::error::Found $MED MEDIUM alerts (>=3) — failing."
            exit 4
          fi
          echo "Alert counts within thresholds."

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: |
            zap_report.html
            zap_report.json

      - name: Cleanup Docker
        if: always()
        run: |
          docker ps -a
          docker stop juice_shop_demo || true
          docker rm juice_shop_demo || true
