name: Dynamic Application Security Testing - OWASP ZAP

on:
  workflow_dispatch:
  push:
    branches: [ "main", "**" ]
  pull_request:

env:
  TARGET_URL: http://localhost:8080
  ZAP_TIMEOUT_MINUTES: 20
  MEDIUM_THRESHOLD: 3
  FAIL_ON_HIGH: "true"

jobs:
  zap-dast-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Juice Shop (vulnerable app) in Docker
        run: |
          echo "Starting OWASP Juice Shop (for DAST target)..."
          docker run -d --name juice_shop_demo -p 8080:3000 bkimminich/juice-shop:latest
          echo "Waiting for Juice Shop to be ready (max 3 minutes)..."
          for i in {1..36}; do
            if curl -sSf ${TARGET_URL} >/dev/null 2>&1; then
              echo "Juice Shop is up!"
              break
            fi
            echo "Waiting... ($i/36)"
            sleep 5
          done
          curl -I --max-time 5 ${TARGET_URL} || true

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Run OWASP ZAP Baseline Scan (no artifact upload)
        run: |
          docker run --rm \
            -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t ${TARGET_URL} \
            -a \
            -r zap_report.html \
            -J zap_report.json \
            -T ${ZAP_TIMEOUT_MINUTES}

      - name: Show reports generated
        run: |
          echo "Generated files:"
          ls -la zap_report.*

      - name: Evaluate ZAP report (fail on thresholds)
        if: always()
        run: |
          set -euo pipefail
          JSON="zap_report.json"

          if [ ! -f "$JSON" ]; then
            echo "JSON report not found, skipping alert evaluation."
            exit 0
          fi

          HIGH_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk=="High")] | length' "$JSON")
          MEDIUM_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk=="Medium")] | length' "$JSON")
          LOW_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk=="Low")] | length' "$JSON")

          echo "High alerts: $HIGH_COUNT"
          echo "Medium alerts: $MEDIUM_COUNT"
          echo "Low alerts: $LOW_COUNT"

          if [ "${FAIL_ON_HIGH}" = "true" ] && [ "$HIGH_COUNT" -gt 0 ]; then
            echo "::error::Found $HIGH_COUNT HIGH alerts — failing job."
            exit 3
          fi

          if [ "$MEDIUM_COUNT" -ge "${MEDIUM_THRESHOLD}" ]; then
            echo "::error::Found $MEDIUM_COUNT MEDIUM alerts (threshold=${MEDIUM_THRESHOLD}) — failing job."
            exit 4
          fi

          echo "ZAP alert counts within threshold."

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap_dast_report
          path: |
            zap_report.html
            zap_report.json

      - name: Cleanup Docker
        if: always()
        run: |
          docker stop juice_shop_demo || true
          docker rm juice_shop_demo || true
